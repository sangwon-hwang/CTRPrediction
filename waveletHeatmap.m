% data load

dir = "/Users/sangwonhwang/Desktop/03.CTRPrediction/data/cvr.csv";
cvr = importdata(dir); % importdata drops NaN
data = cvr.data();

%% lookback windows size(image window), shift time size, units(min) of aggregation, min-max scaling 

img_window  = 120; % lookback window size is 2 hours
data_shift  = 119; % for building shifting matrix
                   % Question - data_diff   = 4; 
                   % for buidling differenced matrix 일단 계차수열은 구하지 말자.
data_agg    = [5 10 20]; % for building aggregated data by days % shift크기가의 약수로 정해주자. 계산의 편의를 위해서
data_weight = [5 10 20]; % for building smoothed data by days % shift크기가의 약수로 정해주자. 계산의 편의를 위해서

data_length = numel(data) - 1; % returns the the number of elements, n, in array data.
y = data(img_window+1:data_length+1); % for test. Changed from % y = data(2:data_length+1);
                                      % min-max scaling does not require
                                      % due to it is CTR
data = data(1:data_length);

%% SHIFT by one minute "s_img"

for k = 1:floor(data_length/img_window) % should be overlapped?
    s_img = zeros(data_shift+1,img_window);
    s_img(1,:) = data((k-1)*img_window+1:k*img_window); % s_img(1,:) = data(1:img_window);

    for i = 1:data_shift % visulization not actual input data
        s_img(i+1,:) = circshift(data((k-1)*img_window+1:k*img_window),i); % Shift Array Circularly, one min by one min
    	s_img(i+1,1:i) = 0; % 추가
    end
    
%         figure;
%         heatmap(s_img);
%         saveas(figure,sprintf('../data/%d_cvr/shifted.jpg', k));
end

%% SHIFT and Transform(wavelet)

for k = 1:floor(data_length/img_window) %floor(data_length/img_window) % should be overlapped?
    s_img = zeros(data_shift+1,img_window);
    s_img(1,:) = data((k-1)*img_window+1:k*img_window); % s_img(1,:) = data(1:img_window);

    for i = 1:data_shift % visulization not actual input data
        s_img(i+1,:) = circshift(data((k-1)*img_window+1:k*img_window),i); % Shift Array Circularly, one min by one min
    	s_img(i+1,1:i) = 0; % 추가
%         [temp_cwt, temp_freq] = cwt(normalize(s_img(k,:), 'range') , 'morse', 5);
%         [temp_cwt, temp_freq] = cwt(s_img(i+1,:));
%         real(temp_cwt)
%         abs(temp_cwt).^2)
    end
        
%         figure;
%         heatmap(s_img);
%         saveas(figure,sprintf('../data/%d_cvr/shifted.jpg', k));

end

%% Aggregation with time units(data_agg) "a_img"

for k = 1:floor(data_length/img_window) % should be overlapped?
    a_img = zeros(numel(data_agg)+1, img_window);

    for a = 1:numel(data_agg)
        a_img(1,:) = data((k-1)*img_window+1:k*img_window);
        
        for i = k*img_window:-1*data_agg(a):(k-1)*img_window+1
            disp(i)
            a_img(a+1, max(1,i-(k-1)*img_window-data_agg(a)+1):i-(k-1)*img_window) = mean(data(max(1,i-data_agg(a)+1):i));
            % i -> i-(k-1)*img_window
        end
    end

%         figure;
%         heatmap(a_img);
%         saveas(figure,sprintf('../data/%d_cvr_aggregated.jpg', k))

end

%%


[temp_cwt, temp_freq] = cwt( daily_click_5.data(:,j+1) , w_type(k));
args = {daily_click_5.data(:,1), temp_freq, abs(temp_cwt).^2};





































%%
% function scrap_series_nn(data)

%% data setup
data = [968.230000000000,997.690000000000,1018.05000000000,1030.82000000000,1129.87000000000,1005.81000000000,895.670000000000,905.170000000000,913.520000000000,899.350000000000,904.790000000000,775.980000000000,802.830000000000,826.120000000000,818.640000000000,822.420000000000,830.260000000000,904.450000000000,884.250000000000,898.020000000000,891.620000000000,920.010000000000,925.330000000000,912.690000000000,885.650000000000,894.110000000000,915.100000000000,918.560000000000,920.280000000000,914.040000000000,920.240000000000,967.670000000000,987.350000000000,1007.79000000000,1018.11000000000,1033.65000000000,1013.99000000000,1024.61000000000,1052.54000000000,1054.34000000000,988.950000000000,993.080000000000,1010,999.510000000000,996.860000000000,1009.25000000000,1009.12000000000,1034.08000000000,1053.12000000000,1058.41000000000,1052.82000000000,1083.24000000000,1123.66000000000,1122.19000000000,1178.38000000000,1180.92000000000,1151.58000000000,1179.97000000000,1194.28000000000,1190.89000000000,1230.02000000000,1260.92000000000,1290.79000000000,1267.68000000000,1277.68000000000,1280.87000000000,1232.43000000000,1150.48000000000,1191.81000000000,1117.02000000000,1181.64000000000,1229.50000000000,1243.24000000000,1246.31000000000,1259.60000000000,1172.91000000000,1070.13000000000,970.600000000000,1017.80000000000,1041.34000000000,1115.04000000000,1037.44000000000,1029.95000000000,935.950000000000,964.690000000000,965.230000000000,1040.49000000000,1044.25000000000,1040.39000000000,1037.53000000000,1079.75000000000,1089.51000000000,1098.78000000000,1147.63000000000,1143.75000000000,1135,1190.60000000000,1193.02000000000,1184.82000000000,1210.05000000000,1213.34000000000,1224.77000000000,1216.50000000000,1178.53000000000,1183.44000000000,1180.70000000000,1184.79000000000,1203.73000000000,1217.60000000000,1226.94000000000,1255.40000000000,1257.13000000000,1244.37000000000,1248.22000000000,1248.32000000000,1263.54000000000,1284.84000000000,1329.19000000000,1320.05000000000,1327.04000000000,1347.96000000000,1402.08000000000,1443.68000000000,1492,1515.63000000000,1512.21000000000,1548.29000000000,1555.47000000000,1639.32000000000,1706.93000000000,1756.80000000000,1807.37000000000,1676.99000000000,1759.96000000000,1772.42000000000,1697.38000000000,1718.20000000000,1802.16000000000,1887.33000000000,1968.10000000000,2051.73000000000,2055.62000000000,2139.03000000000,2291.48000000000,2476.30000000000,2357.50000000000,2247.48000000000,2106.31000000000,2207.58000000000,2289.87000000000,2197.23000000000,2330.23000000000,2452.18000000000,2517.41000000000,2555.65000000000,2552.81000000000,2736.59000000000,2914.08000000000,2694.22000000000,2825.03000000000,2826.70000000000,2942.34000000000,3018.54000000000,2682.59000000000,2738.93000000000,2494.48000000000,2456.92000000000,2528.10000000000,2664,2576.17000000000,2641.66000000000,2778.83000000000,2712.16000000000,2740.79000000000,2738.22000000000,2619.12000000000,2594.45000000000,2485.36000000000,2593.17000000000,2584.56000000000,2561.56000000000,2499.98000000000,2460.20000000000,2529.78000000000,2581.07000000000,2625.07000000000,2629.27000000000,2619.11000000000,2521.24000000000,2579.93000000000,2525.67000000000,2371.96000000000,2332.19000000000,2423.16000000000,2364.52000000000,2232.65000000000,1993.26000000000,1938.94000000000,2244.26000000000,2327.90000000000,2294.40000000000,2877.39000000000,2694.29000000000,2838.81000000000,2762.63000000000,2779.04000000000,2591.22000000000,2550.18000000000,2697.47000000000,2805.18000000000,2720.08000000000,2746.33000000000,2873.83000000000,2735.59000000000,2723.58000000000,2814.36000000000,2883.68000000000,3301.76000000000,3255,3431.97000000000,3453.16000000000,3377.54000000000,3445.28000000000,3679.61000000000,3917.65000000000,4111.20000000000,4382.74000000000,4204.43000000000,4425.30000000000,4316.34000000000,4159.46000000000,4206.13000000000,4111.22000000000,4054.94000000000,4137.67000000000,4191.22000000000,4362.47000000000,4408.32000000000,4387.46000000000,4394.51000000000,4439.66000000000,4648.13000000000,4630.73000000000,4764.87000000000,4950.72000000000,4643.97000000000,4631.69000000000,4319.72000000000,4422.12000000000,4626.72000000000,4638.10000000000,4317.54000000000,4291.88000000000,4191.17000000000,4188.84000000000,4148.27000000000,3874.26000000000,3226.41000000000,3686.90000000000,3678.74000000000,3672.57000000000,4067.08000000000,3897,3858.09000000000,3612.68000000000,3603.31000000000,3777.29000000000,3662.12000000000,3927.50000000000,3895.51000000000,4208.56000000000,4185.29000000000,4164.10000000000,4353.05000000000,4394.64000000000,4404.10000000000,4320.09000000000,4225.92000000000,4322.75000000000,4370.24000000000,4437.03000000000,4596.96000000000,4772.97000000000,4754.70000000000,4830.77000000000,5439.13000000000,5640.13000000000,5809.69000000000,5697.39000000000,5754.22000000000,5595.23000000000,5572.20000000000,5699.58000000000,5984.09000000000,6013.23000000000,5984.96000000000,5895.30000000000,5518.85000000000,5733.90000000000,5888.14000000000,5767.68000000000,5732.82000000000,6140.53000000000,6121.80000000000,6447.67000000000,6750.17000000000,7030,7161.45000000000,7387,7382.45000000000,6958.21000000000,7118.80000000000,7458.79000000000,7146.78000000000,6570.31000000000,6337,5857.32000000000,6517.68000000000,6598.77000000000,7279,7843.94000000000,7689.91000000000,7776.94000000000,8033.94000000000,8238.20000000000,8095.59000000000,8230.69000000000,8002.64000000000,8201.46000000000,8763.78000000000,9326.59000000000,9739.05000000000,9908.23000000000,9816.35000000000,9916.54000000000,10859.5600000000,10895.0100000000,11180.8900000000,11616.8500000000,11696.0600000000,13708.9900000000,16858.0200000000,16057.1400000000,14913.4000000000,15036.9600000000,16699.6800000000,17178.1000000000,16407.2000000000,16531.0800000000,17601.9400000000,19343.0400000000,19086.6400000000,18960.5200000000,17608.3500000000,16454.7200000000,15561.0500000000,13857.1400000000,14548.7100000000,13975.4400000000,13917.0300000000,15745.2600000000,15378.2800000000,14428.7600000000,14427.8700000000,12629.8100000000,13860.1400000000,13412.4400000000,14740.7600000000,15134.6500000000,15155.2300000000,16937.1700000000,17135.8400000000,16178.4900000000,14970.3600000000,14439.4700000000,14890.7200000000,13287.2600000000,13812.7100000000,14188.7800000000,13619.0300000000,13585.9000000000,11348.0200000000,11141.2500000000,11250.6500000000,11514.9200000000,12759.6400000000,11522.8600000000,10772.1500000000,10839.8300000000,11399.5200000000,11137.2400000000,11090.0600000000,11407.1500000000,11694.4700000000,11158.3900000000,10035,10166.5100000000,9052.58000000000,8827.63000000000,9224.39000000000,8186.65000000000,6914.26000000000,7700.39000000000,7581.80000000000,8237.24000000000,8689.84000000000,8556.61000000000,8070.80000000000,8891.21000000000,8516.24000000000,9477.84000000000,10016.4900000000,10178.7100000000,11092.1500000000,10396.6300000000,11159.7200000000,11228.2400000000,10456.1700000000,9830.43000000000,10149.4600000000,9682.38000000000,9586.46000000000,10313.0800000000,10564.4200000000,10309.6400000000,10907.5900000000,11019.5200000000,11438.6500000000,11479.7300000000,11432.9800000000,10709.5300000000,9906.80000000000,9299.28000000000,9237.05000000000,8787.16000000000,9532.74000000000,9118.27000000000,9144.15000000000,8196.90000000000,8256.99000000000,8269.33000000000,7862.11000000000,8196.02000000000,8594.19000000000,8915.90000000000,8895.40000000000,8712.89000000000,8918.74000000000,8535.89000000000,8449.83000000000,8138.34000000000,7790.16000000000,7937.20000000000,7086.49000000000,6844.32000000000,6926.02000000000,6816.74000000000,7049.79000000000,7417.89000000000,6789.30000000000,6774.75000000000,6620.41000000000,6896.28000000000,7022.71000000000,6773.94000000000,6830.90000000000,6939.55000000000,7916.37000000000,7889.23000000000,8003.68000000000,8357.04000000000,8051.34000000000,7890.15000000000,8163.69000000000,8273.74000000000,8863.50000000000,8917.60000000000,8792.83000000000,8938.30000000000,9652.16000000000,8864.09000000000,9279,8978.33000000000,9342.47000000000,9392.03000000000,9244.32000000000,9067.71000000000,9219.86000000000,9734.67000000000,9692.72000000000,9826.60000000000,9619.14000000000,9362.53000000000,9180.16000000000,9306,9014.61000000000,8668.17000000000];

%data = chickenpox_dataset; data = [data{:}];
%data = 1:80 + 100;
%하나씩 29번 shift 하겠다. 그러면 총 30개의 windows가 생긴다
%각 row는 daily oberseved data가 된다

data_shift  = 29; % for building shifting matrix
data_diff   = 4; % for buidling differenced matrix
data_agg    = [7 14 28]; % for building aggregated data by days
data_weight = [7 14 28]; % for building smoothed data by days
data_length = numel(data) - 1; % returns the the number of elements, n, in array data.
                               % 설정을 그냥 496으로 실제 전체 크기는 497 
img_window  = 28; 

data = (data - min(data)) / (max(data) - min(data)); % min-max normalization
y = data(2:data_length+1);  % next time unit 값 예측
data = data(1:data_length); % 관측 : 전체-1

%% setup series shift data
% first built s_img
s_img = zeros(data_shift+1, data_length); % shift를 data_shift번하니까 전체 데이터의 크기는 data_shift+1
s_img(1,:) = data; % 21줄 코드로 인해서 길이는 1X496

temp_circshift_0 = circshift(data,0)
temp_circshift_1 = circshift(data,1)
temp_circshift_2 = circshift(data,2)

temp_circshift_0(1:5)
temp_circshift_1(1:5)
temp_circshift_2(1:5)

for i = 1:data_shift
    s_img(i+1,:) = circshift(data,i); % Shift Array Circularly, one by one
end

origin_s_img = s_img;
% s_img = zeros(data_shift+1, data_length-data_shift+1 ); % shift를 data_shift번하니까 전체 데이터의 크기는 data_shift+1
s_img = s_img(:,data_shift+1:data_length); %from data_shift+1 to data_length

% next build x_s_img and y_s_img
sz = size(s_img);
imgs = sz(2)-img_window + 1;
x_img = zeros(sz(1),img_window,1,imgs);
y_img = zeros(imgs,1);
[x_img_H, x_img_W, ~, ~] = size(x_img);
cnt = 1;

for i = sz(2):-1:img_window
    x_img(:,:,1,cnt) = s_img(:,i-img_window+1:i);
    y_img(cnt) = y(end - cnt + 1);
    cnt = cnt + 1;
end
    
y_img = flipud(y_img);


figure;
heatmap(origin_s_img);
figure;
heatmap(s_img);
figure;
heatmap(y_img);

%% setup series differenced data
d_img = zeros(data_diff + 1, data_length);
d_img(1,:) = data;

for i = 1:data_diff
    d_img(i+1,i+1:end) = diff(data,i); % 계차수열(차분)을 구한다 Y = [X(2)-X(1) X(3)-X(2) ... X(m)-X(m-1)]
    disp(i)
end

d_img = d_img(:,data_diff+1:data_length);
% next build x_d_img and y_d_img

sz = size(d_img);
imgs = sz(2)-img_window + 1;
x_img = zeros(sz(1),img_window,1,imgs);
y_img = zeros(imgs,1);
[x_img_H, x_img_W, ~, ~] = size(x_img);
cnt = 1;

for i = sz(2):-1:img_window
    x_img(:,:,1,cnt) = d_img(:,i-img_window+1:i);
    y_img(cnt) = y(end - cnt + 1);
    cnt = cnt + 1;
end

y_img = flipud(y_img);

figure;
heatmap(d_img);

figure;
heatmap(y_img);


%% setup series aggregate data 
a_img = zeros(numel(data_agg)+1, data_length);
a_img(1,:) = data;

%figure; hold on; plot(a_img(1,:));
for a = 1:numel(data_agg)
    for i = data_length:-1*data_agg(a):1 % 데이터 마지막 부분부터 1까지 7개씩/14개씩/28개씩 감소 감소
        disp(i)        
        a_img(a+1,max(1,i-data_agg(a)+1):i) = mean(data(max(1,i-data_agg(a)+1):i));
    end
    %plot(a_img(a+1,:));
end

% next build x_a_img and y_a_img
sz = size(a_img);
imgs = sz(2)-img_window + 1;
x_img = zeros(sz(1),img_window,1,imgs);
y_img = zeros(imgs,1);
[x_img_H, x_img_W, ~, ~] = size(x_img);
cnt = 1;

for i = sz(2):-1:img_window
    x_img(:,:,1,cnt) = a_img(:,i-img_window+1:i);
    y_img(cnt) = y(end - cnt + 1);
    cnt = cnt + 1;
end

y_img = flipud(y_img);

figure;
heatmap(a_img);

figure;
heatmap(y_img);


